@page
@model Acts.Pages.ActionCategories.IndexModel

@{
    ViewData["Title"] = "ActionCategories";
}

<h1>ActionCategories List</h1>

@*<p>
    <a asp-page="Create">Create New</a>
    </p>*@

@*ASP.NET Core 소스*@
@*
    <table class="table">
    <thead>
    <tr>
    <th>
    @Html.DisplayNameFor(model => model.ActionCategory[0].Category)
    </th>
    <th>
    @Html.DisplayNameFor(model => model.ActionCategory[0].Active)
    </th>
    <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.ActionCategory)
    {
    <tr>
    <td>
    @Html.DisplayFor(modelItem => item.Category)
    </td>
    <td>
    @Html.DisplayFor(modelItem => item.Active)
    </td>
    <td>
    <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
    <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
    <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
    </td>
    </tr>
    }
    </tbody>
    </table>
    <hr />
*@

<script type="importmap">
    {
        "imports": {
        "vue": "https://unpkg.com/vue@3/dist/vue.esm-browser.prod.js"
        }
    }
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.26.0/axios.min.js"></script>


<div id="appActionCategoriesVue">
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Category" 
            aria-label="Category" aria-describedby="btnAdd" v-model="category">
        <button class="btn btn-outline-secondary" type="button" 
            id="btnAdd" v-on:click="btnAdd_Click"> Add </button>
    </div>
    <table class="table table-bordered table-hover">
        <colgroup>
            <col style="width: 50%;" />
            <col style="width: 25%;" />
            <col style="width: auto;" />
            <col style="width: 250px;" />
        </colgroup>
        <thead class="thead-light">
            <tr>
                <th>Category</th>
                <th>Active</th>
                <th>&nbsp;</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="vm in models" v-bind:key="vm.id">
                <td>
                    <span v-if="vm.active == true">
                        {{vm.category}}
                    </span>
                    <span v-else style="text-decoration: line-through;">
                        {{vm.category}}
                    </span>
                </td>
                <td>
                    <input type="checkbox" v-model="vm.active" />
                    @*{{vm.active}}*@
                </td>
                <td>
                    &nbsp;
                </td>
                <td>
                    <a v-bind:href="`/ActionCategories/Edit?id=${vm.id}`">Edit</a> |
                    <a href="#" v-on:click="btnToggle_Click(vm)">Toggle</a> | 
                    <a v-bind:href="`/ActionCategories/Details?id=${vm.id}`">Details</a> |
                    <a href="#" v-on:click="btnDelete_Click(`${vm.id}`)">Delete</a>
                </td>
            </tr>
        </tbody>
    </table>
    <Search />
</div>

<script type="module">
    import { createApp } from 'vue';

    import Search from './ActionCategories/Search.js'; 

    createApp({
        components: {
            Search 
        },
        data() {
            return {
                title: '게시판 리스트 with Vue.js',
                models: [],
                category: '',
                active: true
            }
        },
        methods: {
            async btnAdd_Click() {
                // Crud: 데이터 저장
                await axios.post("/api/ActionCategories", {
                    gbAdjusted: false,
                    category: this.category,
                    active: this.active
                });

                this.category = "";

                // 다시 읽어오기
                this.displayData();
            },
            async btnDelete_Click(id) {
                if (!window.confirm('정말로 삭제?')) {
                    return false;
                }

                // cruD: 데이터 삭제
                await axios.delete(`/api/ActionCategories/${id}`);

                // 다시 읽어오기
                this.displayData();
            },
            async btnToggle_Click(vm) {
                if (!window.confirm('정말로 변경?')) {
                    return false;
                }

                // crUd: 데이터 수정
                await axios.put(`/api/ActionCategories/${vm.id}`, {
                    id: vm.id,
                    gbAdjusted: false,
                    category: vm.category,
                    active: !vm.active
                });

                // 다시 읽어오기
                this.displayData();
            },
            async displayData() {
                // cRud
                const result = await axios.get("/api/ActionCategories");
                const models = result.data;
                this.models = models;
            }
        },
        async created() {
            // cRud: displayData() function과 동일
            const result = await axios.get("/api/ActionCategories");
            const models = result.data;
            this.models = models;
        }
    }).mount('#appActionCategoriesVue')
</script>
